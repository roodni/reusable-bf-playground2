import "@vitest/web-worker";
import { describe, expect, test } from "vitest";
import { optimize } from "./optimizer";
import { parse } from "./parser";
import { Runner, RunnerEvent } from "./runner";

type TestCase = {
  label: string;
  code: string;
  io: [string, string][];
};

const testCases: TestCase[] = [
  {
    label: "Hello World!",
    code: "+++++++++[->++++++++<]>.<+++++++[->++++<]>+.+++++++..+++.<++++++++>[-]<[->++++<]>.<+++++++++++[->+++++<]>.<++++++[->++++<]>.+++.------.--------.<++++++++>[-]<[->++++<]>+.[-]++++++++++.[-]",
    io: [["", "Hello World!\n"]],
  },
  {
    label: "FizzBuzz",
    code: ">>>>>>>>>>>>>>>++++++++++<<<<<<<<<<<<,----------[-------------------------------------->[-<++++++++++>]<[->+<],----------]+++<<<+++++>>>>[->>>>>>>>>>[>>>>>]+[>>+<[>-]>[-<++++++++++>>]<<->+<[>-<<[-<<<<<]>>]>[-<++++++++++>>>>+>>>]<<<][<<<<<]<<<<++<<-<+>[<->>>-<<<]<[->+++>>>>>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+++++++++++++++++++++++++++++++++++.+++++++++++++++++..[-]<<<<<<<]<->+<[>->>>>-<<<<]>[-<+++++>>>>>>>>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+++++++++++++++++++++++++++++++++++++++++++++++++++.+++++..[-]<<<<<<]>>>>+<[>-]>[->>>>>>>>[>>>>>]>[<+>>>>>>]<<<<<[>>>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++<<<[->>>-<<<]>>>.<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>>>[-<<<->>>]<<<<-<<<<]<[<<<<<]<<]<<[-]++++++++++++++++++++++++++++++++.[-]<]",
    io: [
      ["16\n", "1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz 16 "],
    ],
  },
  {
    label: "switch",
    code: ",>>>+++++++++++++++++++++++++++++++++++++++++++>+<[-<<+<[>-<->]>[->>>-<[-]<]>]<<+<[>->>>-<<<]>[->]>>>+<[->-<<+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+++++.-----------.[-]>]>[-<<+>+<[-<<+<[>-<->]>[->>>-<<]>]<<+<[>->>>-<<<]>[->]>>>+<[->-<<+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.--.+++++++++++++++.[-]>]>[-<<+>+<[-<<+<[>-<->]>[->>>-<<]>]<<+<[>->>>-<<<]>[->]>>>+<[->-<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+.--.[-]>]>[-<<+>+<[-<<+<[>-<->]>[->>>-<<]>]<<+<[>->>>-<<<]>[->]>>>+<[->-<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+++++.-.[-]>]>[-<<++++++++++++++>+<[-<<+<[>-<->]>[->>>-<[-]<]>]<<+<[>->>>-<<<]>[->]>>>+<[->-<<+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.-----------.++++.[-]>]>[-<<++>+<[-<<+<[>-<->]>[->>>-<[-]<]>]<<+<[>->>>-<<<]>[->]>>>+<[->-<<+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.-----------.++++++++++.[-]>]>[-<<+++++++++++++++++++++++++++++>+<[-<<+<[>-<->]>[->>>-<[-]<]>]<<+<[>->>>-<<<]>[->]>>>+<[->-<<+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.---------------.+.+++.-------.[-]>]>[-<<++>+<[-<<+<[>-<->]>[->>>-<[-]<]>]<<+<[>->>>-<<<]>[->]>>>+<[->-<<+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.------------------.+++++++++.----------.[-]>]>[-<+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+++++.------------.---.+++++++++++++.[-]>]]]]]]]]",
    io: [
      ["+", "INC"],
      ["-", "DEC"],
      ["\n", "OTHER"],
    ],
  },
  {
    label: "エラーが発生しなければOK",
    code: "[-<+>]",
    io: [["", ""]],
  },
];

describe.each(testCases)("実行できる ($label)", (tc) => {
  const res = parse(tc.code);
  if (res.t === "error") {
    expect.fail(res.msg);
  }
  const commands = optimize(res.commands);

  test.each(tc.io)("#%# 出力が正しい", async (input, want) => {
    const output = await new Promise<string>((resolve, reject) => {
      let buf = "";
      const handler = (ev: RunnerEvent) => {
        if (ev.t === "output") {
          buf += ev.output;
        } else if (ev.t === "finish") {
          resolve(buf);
        } else if (ev.t === "error") {
          reject(ev.kind);
        }
      };
      new Runner(commands, input, handler, {
        mode: "utf8",
      });
    });
    expect(output).toBe(want);
  });

  test.each(tc.io.filter(([input]) => input !== ""))(
    "#%# インタラクティブ入力",
    async (input, want) => {
      const output = await new Promise<string>((resolve, reject) => {
        const ibuf = [...input];
        let obuf = "";

        let runner: Runner;
        const handler = (ev: RunnerEvent) => {
          if (ev.t === "input") {
            const c = ibuf.shift();
            if (c === undefined) {
              reject("eof");
              return;
            }
            runner.input(c);
          } else if (ev.t === "output") {
            obuf += ev.output;
          } else if (ev.t === "finish") {
            resolve(obuf);
          } else if (ev.t === "error") {
            reject(ev.kind);
          }
        };
        runner = new Runner(commands, "", handler, {
          mode: "utf8",
        });
      });
      expect(output).toBe(want);
    },
  );
});

describe("ポインタ範囲外エラーが発生する", () => {
  test.each(["<", "+[>+]", "+[-<+>]"])("%s", async (code) => {
    const res = parse(code);
    if (res.t === "error") {
      expect.fail(res.msg);
    }
    const commands = optimize(res.commands);

    const promise = new Promise<void>((resolve, reject) => {
      const handler = (ev: RunnerEvent) => {
        if (ev.t === "error" && ev.kind === "pointer") {
          resolve();
        } else {
          reject();
        }
      };
      new Runner(commands, "", handler, {
        mode: "utf8",
      });
    });

    await expect(promise).resolves.toBeUndefined();
  });
});
