/* 小規模だからCSSは一枚でいいかと思った */
.app {
  --form-gap: 4px;
  --paragraphs-gap: 8px;
  --sections-gap: 40px;

  --left-width: 1fr;
  --right-width: 1fr;
}

body {
  margin: 0;
}

* {
  box-sizing: border-box;
}

/* App */

/* 外枠の配置 */
.app {
  > .header {
    grid-area: h;
  }
  > .left {
    grid-area: l;
  }
  > .middle {
    grid-area: m;
  }
  > .right {
    grid-area: r;
  }
}

@media screen and (min-width: 601px) {
  /* PC */
  .app {
    height: 100svh;

    display: grid;
    grid-template-areas:
      "h h h"
      "l m r";
    grid-template-rows: max-content 1fr;
    grid-template-columns: var(--left-width) max-content var(--right-width);

    > .left {
      /* 限界を超えて幅を狭められるように */
      overflow-x: auto;
    }

    > .right {
      /* これがないと左エリアが右につられて縦に伸びる */
      overflow-y: auto;
    }
  }
}

@media screen and (max-width: 600px) {
  /* スマホ */
  .app {
    width: 100%;

    display: grid;
    grid-template-areas:
      "h"
      "l"
      "r";
    grid-template-rows: max-content max-content;

    .editor {
      height: 50svh;
    }

    > .middle {
      display: none;
    }
  }
}

/* 内装 */
.app {
  > .header {
    padding: var(--form-gap);

    border-bottom-width: 1px;
    border-bottom-style: dotted;
    border-bottom-color: gray;

    display: flex;
    flex-wrap: wrap;
    align-items: center;
    column-gap: 8px;
  }

  > .left {
    padding: var(--form-gap);

    display: grid;
    grid-template-rows: max-content 1fr max-content;
    gap: var(--form-gap);
  }

  > .middle {
    --margin: 2px;

    position: relative;
    width: 1px;
    margin: 0 var(--margin);
    border-left-width: 1px;
    border-left-style: dotted;
    border-left-color: gray;

    > .resizer {
      position: absolute;
      top: 0;
      left: calc(var(--form-gap) * -1 - 1px - var(--margin));
      width: calc(var(--form-gap) * 2 + 1px + var(--margin) * 2);
      height: 100%;
      cursor: col-resize;
    }
  }

  > .right {
    padding: var(--form-gap);
  }
}

.app-resizing {
  /* リサイズ中の選択暴発を封じる */
  user-select: none;
}

h1.header-title {
  font-size: 1.4rem;
  margin: 0;
}

.input {
  min-height: 2.5rem;
  font-size: 1rem;
}

.inputs-container {
  width: 100%;
  display: flex;
  flex-wrap: wrap;

  > .expand {
    flex: 1;
  }
}

.status {
  font-size: 1.1rem;
}

.sections-column {
  display: flex;
  flex-direction: column;
  gap: var(--sections-gap);
}

.paragraphs-column {
  display: flex;
  flex-direction: column;
  gap: var(--paragraphs-gap);
}

.forms-column {
  display: flex;
  flex-direction: column;
  gap: var(--form-gap);
}

.editor {
  width: 100%;
  border-style: solid;
  border-width: 1px;
  border-color: gray;
}

.shortcut {
  font-size: 90%;
  white-space: nowrap;
}
.shortcut-disabled {
  opacity: 40%;
}

.settings-summary {
  user-select: none;
}
@media (hover: hover) {
  .settings-summary:hover {
    color: gray;
  }
}

.settings-table {
  border-spacing: var(--form-gap);
  padding-left: 24px;
}

.settings-checkbox {
  margin: 0;
}

/* CodeArea */

.interactive-input,
.code-area {
  font-size: 16px;
  font-family: Monaco, Menlo, "Ubuntu Mono", Consolas, "Source Code Pro",
    source-code-pro, monospace;
}

.code-area {
  width: 100%;
  padding: 2px;
  display: block;

  border-style: solid;
  border-width: 1px;
  border-color: gray;

  /* 何が何でも改行したい */
  word-break: break-all;
  overflow-wrap: anywhere;
  line-break: anywhere;
  white-space: break-spaces;
}

.code-input-area {
  resize: vertical;
  overflow-y: scroll;
}

.code-input-area-disabled {
  opacity: 50%;
}

.code-display-area {
  margin: 0;
  max-height: 70svh;
  &:focus {
    outline: auto;
  }
}

.code-display-area-cursor-eof::after {
  content: "[EOF]";
  opacity: 50%;
}
.code-display-area-cursor-zerowidth::after {
  content: "​";
}

.code-display-area-variant-normal {
  border-color: lightgray;
  background-color: whitesmoke;
  overflow-y: scroll;
}

.code-display-area-variant-error {
  border-color: lightgray;
  background-color: pink;
}
